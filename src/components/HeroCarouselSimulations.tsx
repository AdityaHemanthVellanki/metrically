import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowRight, BarChart4, LayoutDashboard, Award } from "lucide-react";
import { Button } from "@/components/ui/button";

const slides = [
  {
    key: "kpi",
    label: "KPI Generation",
    content: (
      <div className="flex flex-col items-center justify-center h-full">
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -40 }}
          className="glass-card p-8 rounded-xl shadow-lg w-80 flex flex-col items-center"
        >
          <BarChart4 className="h-12 w-12 text-primary mb-4" />
          <h3 className="text-xl font-bold mb-2">Generate a KPI</h3>
          <p className="text-muted-foreground mb-4 text-center">Click below to see a KPI generated by AI.</p>
          <KpiSimulation />
        </motion.div>
      </div>
    ),
  },
  {
    key: "dashboard",
    label: "Dashboard Demo",
    content: (
      <div className="flex flex-col items-center justify-center h-full">
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -40 }}
          className="glass-card p-8 rounded-xl shadow-lg w-[360px] flex flex-col items-center"
        >
          <LayoutDashboard className="h-12 w-12 text-primary mb-4" />
          <h3 className="text-xl font-bold mb-2">Interactive Dashboard</h3>
          <DashboardSimulation />
        </motion.div>
      </div>
    ),
  },
  {
    key: "gamified",
    label: "Gamified Progress",
    content: (
      <div className="flex flex-col items-center justify-center h-full">
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -40 }}
          className="glass-card p-8 rounded-xl shadow-lg w-80 flex flex-col items-center"
        >
          <Award className="h-12 w-12 text-yellow-400 mb-4" />
          <h3 className="text-xl font-bold mb-2">Unlock Achievements</h3>
          <GamifiedSimulation />
        </motion.div>
      </div>
    ),
  },
];

export function HeroCarouselSimulations() {
  const [index, setIndex] = useState(0);

  const prev = () => setIndex((i) => (i === 0 ? slides.length - 1 : i - 1));
  const next = () => setIndex((i) => (i === slides.length - 1 ? 0 : i + 1));

  return (
    <div className="relative w-full flex flex-col items-center justify-center py-8">
      <div className="flex items-center gap-4 mb-4">
        <Button variant="ghost" onClick={prev} aria-label="Previous slide" size="icon">
          <svg width="24" height="24" fill="none" viewBox="0 0 24 24"><path d="M15 19l-7-7 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
        </Button>
        <span className="text-lg font-semibold text-primary">{slides[index].label}</span>
        <Button variant="ghost" onClick={next} aria-label="Next slide" size="icon">
          <svg width="24" height="24" fill="none" viewBox="0 0 24 24"><path d="M9 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
        </Button>
      </div>
      <div className="relative w-full max-w-md min-h-[320px] flex items-center justify-center">
        <AnimatePresence mode="wait" initial={false}>
          <motion.div
            key={slides[index].key}
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.4 }}
            className="absolute w-full"
          >
            {slides[index].content}
          </motion.div>
        </AnimatePresence>
      </div>
      <div className="flex justify-center gap-2 mt-4">
        {slides.map((slide, i) => (
          <button
            key={slide.key}
            className={`w-3 h-3 rounded-full transition-all duration-200 border-2 ${i === index ? 'bg-primary border-primary' : 'bg-muted border-muted-foreground'}`}
            onClick={() => setIndex(i)}
            aria-label={`Go to ${slide.label}`}
          />
        ))}
      </div>
    </div>
  );
}

// --- KPI Generation Simulation ---
function KpiSimulation() {
  const [show, setShow] = useState(false);
  return (
    <div className="flex flex-col items-center">
      <Button onClick={() => setShow(true)} disabled={show} className="mb-4">
        Generate KPI
        <ArrowRight className="ml-2 h-5 w-5" />
      </Button>
      <AnimatePresence>
        {show && (
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 30 }}
            transition={{ duration: 0.5 }}
            className="mt-2 w-full"
          >
            <div className="glass p-4 rounded-lg flex flex-col items-center border border-primary/40">
              <span className="text-2xl font-bold text-primary mb-1">MRR Growth</span>
              <span className="text-muted-foreground text-sm mb-2">Monthly Recurring Revenue</span>
              <div className="w-24 h-12 rounded bg-gradient-to-tr from-primary/30 to-primary/10 flex items-end justify-center mb-2">
                <div className="w-16 h-8 bg-primary/80 rounded-b-lg animate-bounce" />
              </div>
              <span className="text-xs text-muted-foreground">+12.7% this month</span>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// --- Dashboard Demo Simulation ---
function DashboardSimulation() {
  const [expanded, setExpanded] = useState<number | null>(null);
  const kpis = [
    { title: "MRR Growth", desc: "Monthly Recurring Revenue", value: "+12.7%" },
    { title: "Active Users", desc: "Users active this week", value: "1,245" },
    { title: "Churn Rate", desc: "User churn this month", value: "2.1%" },
  ];
  return (
    <div className="grid grid-cols-3 gap-2 w-full">
      {kpis.map((kpi, i) => (
        <div
          key={i}
          className={`glass p-3 rounded-lg flex flex-col items-center cursor-pointer transition-all duration-200 border border-primary/30 ${expanded === i ? 'scale-105 shadow-lg z-10' : ''}`}
          onClick={() => setExpanded(expanded === i ? null : i)}
        >
          <span className="font-bold text-primary mb-1">{kpi.title}</span>
          <span className="text-xs text-muted-foreground mb-1">{kpi.desc}</span>
          <div className="w-8 h-8 bg-primary/20 rounded mb-1 flex items-center justify-center">
            <BarChart4 className="h-5 w-5 text-primary" />
          </div>
          <span className="text-sm font-semibold">{kpi.value}</span>
          {expanded === i && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              className="mt-2 text-xs text-center"
            >
              <div className="mb-1">Description: {kpi.desc}</div>
              <div>Benchmark: Top 10% startups</div>
            </motion.div>
          )}
        </div>
      ))}
    </div>
  );
}

// --- Gamified Progress Simulation ---
function GamifiedSimulation() {
  const [progress, setProgress] = useState(0);
  const [unlocked, setUnlocked] = useState(false);
  return (
    <div className="flex flex-col items-center w-full">
      <div className="w-full bg-muted rounded-full h-3 mb-4 overflow-hidden">
        <motion.div
          className="bg-primary h-3 rounded-full"
          initial={{ width: 0 }}
          animate={{ width: `${progress}%` }}
          transition={{ duration: 0.7 }}
          style={{ width: `${progress}%` }}
        />
      </div>
      <Button
        onClick={() => {
          if (progress < 100) {
            setProgress(progress + 50);
            if (progress + 50 >= 100) setUnlocked(true);
          }
        }}
        disabled={unlocked}
        className="mb-2"
      >
        {unlocked ? "Achievement Unlocked!" : "Complete Action"}
      </Button>
      <AnimatePresence>
        {unlocked && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            className="flex items-center gap-2 mt-2"
          >
            <Award className="h-6 w-6 text-yellow-400" />
            <span className="font-semibold text-yellow-400">KPI Master</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
